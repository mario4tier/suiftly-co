/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as WalletDemoRouteImport } from './routes/wallet-demo'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'

const TestLazyRouteImport = createFileRoute('/test')()
const SupportLazyRouteImport = createFileRoute('/support')()
const StatusLazyRouteImport = createFileRoute('/status')()
const ServicesLazyRouteImport = createFileRoute('/services')()
const LogsLazyRouteImport = createFileRoute('/logs')()
const BillingLazyRouteImport = createFileRoute('/billing')()
const ApiKeysLazyRouteImport = createFileRoute('/api-keys')()
const ServicesGrpcLazyRouteImport = createFileRoute('/services/grpc')()
const ServicesGraphqlLazyRouteImport = createFileRoute('/services/graphql')()
const ServicesSealIndexLazyRouteImport = createFileRoute('/services/seal/')()
const ServicesSealStatsLazyRouteImport = createFileRoute(
  '/services/seal/stats',
)()
const ServicesSealConfigLazyRouteImport = createFileRoute(
  '/services/seal/config',
)()

const TestLazyRoute = TestLazyRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/test.lazy').then((d) => d.Route))
const SupportLazyRoute = SupportLazyRouteImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/support.lazy').then((d) => d.Route))
const StatusLazyRoute = StatusLazyRouteImport.update({
  id: '/status',
  path: '/status',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/status.lazy').then((d) => d.Route))
const ServicesLazyRoute = ServicesLazyRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/services.lazy').then((d) => d.Route))
const LogsLazyRoute = LogsLazyRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/logs.lazy').then((d) => d.Route))
const BillingLazyRoute = BillingLazyRouteImport.update({
  id: '/billing',
  path: '/billing',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/billing.lazy').then((d) => d.Route))
const ApiKeysLazyRoute = ApiKeysLazyRouteImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/api-keys.lazy').then((d) => d.Route))
const WalletDemoRoute = WalletDemoRouteImport.update({
  id: '/wallet-demo',
  path: '/wallet-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicesGrpcLazyRoute = ServicesGrpcLazyRouteImport.update({
  id: '/grpc',
  path: '/grpc',
  getParentRoute: () => ServicesLazyRoute,
} as any).lazy(() => import('./routes/services/grpc.lazy').then((d) => d.Route))
const ServicesGraphqlLazyRoute = ServicesGraphqlLazyRouteImport.update({
  id: '/graphql',
  path: '/graphql',
  getParentRoute: () => ServicesLazyRoute,
} as any).lazy(() =>
  import('./routes/services/graphql.lazy').then((d) => d.Route),
)
const ServicesSealIndexLazyRoute = ServicesSealIndexLazyRouteImport.update({
  id: '/seal/',
  path: '/seal/',
  getParentRoute: () => ServicesLazyRoute,
} as any).lazy(() =>
  import('./routes/services/seal.index.lazy').then((d) => d.Route),
)
const ServicesSealStatsLazyRoute = ServicesSealStatsLazyRouteImport.update({
  id: '/seal/stats',
  path: '/seal/stats',
  getParentRoute: () => ServicesLazyRoute,
} as any).lazy(() =>
  import('./routes/services/seal.stats.lazy').then((d) => d.Route),
)
const ServicesSealConfigLazyRoute = ServicesSealConfigLazyRouteImport.update({
  id: '/seal/config',
  path: '/seal/config',
  getParentRoute: () => ServicesLazyRoute,
} as any).lazy(() =>
  import('./routes/services/seal.config.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/wallet-demo': typeof WalletDemoRoute
  '/api-keys': typeof ApiKeysLazyRoute
  '/billing': typeof BillingLazyRoute
  '/logs': typeof LogsLazyRoute
  '/services': typeof ServicesLazyRouteWithChildren
  '/status': typeof StatusLazyRoute
  '/support': typeof SupportLazyRoute
  '/test': typeof TestLazyRoute
  '/services/graphql': typeof ServicesGraphqlLazyRoute
  '/services/grpc': typeof ServicesGrpcLazyRoute
  '/services/seal/config': typeof ServicesSealConfigLazyRoute
  '/services/seal/stats': typeof ServicesSealStatsLazyRoute
  '/services/seal': typeof ServicesSealIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/wallet-demo': typeof WalletDemoRoute
  '/api-keys': typeof ApiKeysLazyRoute
  '/billing': typeof BillingLazyRoute
  '/logs': typeof LogsLazyRoute
  '/services': typeof ServicesLazyRouteWithChildren
  '/status': typeof StatusLazyRoute
  '/support': typeof SupportLazyRoute
  '/test': typeof TestLazyRoute
  '/services/graphql': typeof ServicesGraphqlLazyRoute
  '/services/grpc': typeof ServicesGrpcLazyRoute
  '/services/seal/config': typeof ServicesSealConfigLazyRoute
  '/services/seal/stats': typeof ServicesSealStatsLazyRoute
  '/services/seal': typeof ServicesSealIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/wallet-demo': typeof WalletDemoRoute
  '/api-keys': typeof ApiKeysLazyRoute
  '/billing': typeof BillingLazyRoute
  '/logs': typeof LogsLazyRoute
  '/services': typeof ServicesLazyRouteWithChildren
  '/status': typeof StatusLazyRoute
  '/support': typeof SupportLazyRoute
  '/test': typeof TestLazyRoute
  '/services/graphql': typeof ServicesGraphqlLazyRoute
  '/services/grpc': typeof ServicesGrpcLazyRoute
  '/services/seal/config': typeof ServicesSealConfigLazyRoute
  '/services/seal/stats': typeof ServicesSealStatsLazyRoute
  '/services/seal/': typeof ServicesSealIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/wallet-demo'
    | '/api-keys'
    | '/billing'
    | '/logs'
    | '/services'
    | '/status'
    | '/support'
    | '/test'
    | '/services/graphql'
    | '/services/grpc'
    | '/services/seal/config'
    | '/services/seal/stats'
    | '/services/seal'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/wallet-demo'
    | '/api-keys'
    | '/billing'
    | '/logs'
    | '/services'
    | '/status'
    | '/support'
    | '/test'
    | '/services/graphql'
    | '/services/grpc'
    | '/services/seal/config'
    | '/services/seal/stats'
    | '/services/seal'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/wallet-demo'
    | '/api-keys'
    | '/billing'
    | '/logs'
    | '/services'
    | '/status'
    | '/support'
    | '/test'
    | '/services/graphql'
    | '/services/grpc'
    | '/services/seal/config'
    | '/services/seal/stats'
    | '/services/seal/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  WalletDemoRoute: typeof WalletDemoRoute
  ApiKeysLazyRoute: typeof ApiKeysLazyRoute
  BillingLazyRoute: typeof BillingLazyRoute
  LogsLazyRoute: typeof LogsLazyRoute
  ServicesLazyRoute: typeof ServicesLazyRouteWithChildren
  StatusLazyRoute: typeof StatusLazyRoute
  SupportLazyRoute: typeof SupportLazyRoute
  TestLazyRoute: typeof TestLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/status': {
      id: '/status'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof StatusLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/billing': {
      id: '/billing'
      path: '/billing'
      fullPath: '/billing'
      preLoaderRoute: typeof BillingLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api-keys': {
      id: '/api-keys'
      path: '/api-keys'
      fullPath: '/api-keys'
      preLoaderRoute: typeof ApiKeysLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wallet-demo': {
      id: '/wallet-demo'
      path: '/wallet-demo'
      fullPath: '/wallet-demo'
      preLoaderRoute: typeof WalletDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services/grpc': {
      id: '/services/grpc'
      path: '/grpc'
      fullPath: '/services/grpc'
      preLoaderRoute: typeof ServicesGrpcLazyRouteImport
      parentRoute: typeof ServicesLazyRoute
    }
    '/services/graphql': {
      id: '/services/graphql'
      path: '/graphql'
      fullPath: '/services/graphql'
      preLoaderRoute: typeof ServicesGraphqlLazyRouteImport
      parentRoute: typeof ServicesLazyRoute
    }
    '/services/seal/': {
      id: '/services/seal/'
      path: '/seal'
      fullPath: '/services/seal'
      preLoaderRoute: typeof ServicesSealIndexLazyRouteImport
      parentRoute: typeof ServicesLazyRoute
    }
    '/services/seal/stats': {
      id: '/services/seal/stats'
      path: '/seal/stats'
      fullPath: '/services/seal/stats'
      preLoaderRoute: typeof ServicesSealStatsLazyRouteImport
      parentRoute: typeof ServicesLazyRoute
    }
    '/services/seal/config': {
      id: '/services/seal/config'
      path: '/seal/config'
      fullPath: '/services/seal/config'
      preLoaderRoute: typeof ServicesSealConfigLazyRouteImport
      parentRoute: typeof ServicesLazyRoute
    }
  }
}

interface ServicesLazyRouteChildren {
  ServicesGraphqlLazyRoute: typeof ServicesGraphqlLazyRoute
  ServicesGrpcLazyRoute: typeof ServicesGrpcLazyRoute
  ServicesSealConfigLazyRoute: typeof ServicesSealConfigLazyRoute
  ServicesSealStatsLazyRoute: typeof ServicesSealStatsLazyRoute
  ServicesSealIndexLazyRoute: typeof ServicesSealIndexLazyRoute
}

const ServicesLazyRouteChildren: ServicesLazyRouteChildren = {
  ServicesGraphqlLazyRoute: ServicesGraphqlLazyRoute,
  ServicesGrpcLazyRoute: ServicesGrpcLazyRoute,
  ServicesSealConfigLazyRoute: ServicesSealConfigLazyRoute,
  ServicesSealStatsLazyRoute: ServicesSealStatsLazyRoute,
  ServicesSealIndexLazyRoute: ServicesSealIndexLazyRoute,
}

const ServicesLazyRouteWithChildren = ServicesLazyRoute._addFileChildren(
  ServicesLazyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  WalletDemoRoute: WalletDemoRoute,
  ApiKeysLazyRoute: ApiKeysLazyRoute,
  BillingLazyRoute: BillingLazyRoute,
  LogsLazyRoute: LogsLazyRoute,
  ServicesLazyRoute: ServicesLazyRouteWithChildren,
  StatusLazyRoute: StatusLazyRoute,
  SupportLazyRoute: SupportLazyRoute,
  TestLazyRoute: TestLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
