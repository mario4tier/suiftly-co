/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as WalletDemoRouteImport } from './routes/wallet-demo'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'

const TestLazyRouteImport = createFileRoute('/test')()
const ServicesLazyRouteImport = createFileRoute('/services')()
const LogsLazyRouteImport = createFileRoute('/logs')()
const BillingLazyRouteImport = createFileRoute('/billing')()
const ApiKeysLazyRouteImport = createFileRoute('/api-keys')()

const TestLazyRoute = TestLazyRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/test.lazy').then((d) => d.Route))
const ServicesLazyRoute = ServicesLazyRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/services.lazy').then((d) => d.Route))
const LogsLazyRoute = LogsLazyRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/logs.lazy').then((d) => d.Route))
const BillingLazyRoute = BillingLazyRouteImport.update({
  id: '/billing',
  path: '/billing',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/billing.lazy').then((d) => d.Route))
const ApiKeysLazyRoute = ApiKeysLazyRouteImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/api-keys.lazy').then((d) => d.Route))
const WalletDemoRoute = WalletDemoRouteImport.update({
  id: '/wallet-demo',
  path: '/wallet-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/wallet-demo': typeof WalletDemoRoute
  '/api-keys': typeof ApiKeysLazyRoute
  '/billing': typeof BillingLazyRoute
  '/logs': typeof LogsLazyRoute
  '/services': typeof ServicesLazyRoute
  '/test': typeof TestLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/wallet-demo': typeof WalletDemoRoute
  '/api-keys': typeof ApiKeysLazyRoute
  '/billing': typeof BillingLazyRoute
  '/logs': typeof LogsLazyRoute
  '/services': typeof ServicesLazyRoute
  '/test': typeof TestLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/wallet-demo': typeof WalletDemoRoute
  '/api-keys': typeof ApiKeysLazyRoute
  '/billing': typeof BillingLazyRoute
  '/logs': typeof LogsLazyRoute
  '/services': typeof ServicesLazyRoute
  '/test': typeof TestLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/wallet-demo'
    | '/api-keys'
    | '/billing'
    | '/logs'
    | '/services'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/wallet-demo'
    | '/api-keys'
    | '/billing'
    | '/logs'
    | '/services'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/wallet-demo'
    | '/api-keys'
    | '/billing'
    | '/logs'
    | '/services'
    | '/test'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  WalletDemoRoute: typeof WalletDemoRoute
  ApiKeysLazyRoute: typeof ApiKeysLazyRoute
  BillingLazyRoute: typeof BillingLazyRoute
  LogsLazyRoute: typeof LogsLazyRoute
  ServicesLazyRoute: typeof ServicesLazyRoute
  TestLazyRoute: typeof TestLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/billing': {
      id: '/billing'
      path: '/billing'
      fullPath: '/billing'
      preLoaderRoute: typeof BillingLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api-keys': {
      id: '/api-keys'
      path: '/api-keys'
      fullPath: '/api-keys'
      preLoaderRoute: typeof ApiKeysLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wallet-demo': {
      id: '/wallet-demo'
      path: '/wallet-demo'
      fullPath: '/wallet-demo'
      preLoaderRoute: typeof WalletDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  WalletDemoRoute: WalletDemoRoute,
  ApiKeysLazyRoute: ApiKeysLazyRoute,
  BillingLazyRoute: BillingLazyRoute,
  LogsLazyRoute: LogsLazyRoute,
  ServicesLazyRoute: ServicesLazyRoute,
  TestLazyRoute: TestLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
